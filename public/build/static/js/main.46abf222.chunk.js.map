{"version":3,"sources":["components/Header.js","components/Show.js","components/Create.js","components/Edit.js","App.js","serviceWorker.js","index.js"],"names":["Header","operation","react_default","a","createElement","className","this","setHeader","props","headerTitle","React","Component","Show","book","_id","title","author","description","published_year","publisher","updated_date","ADD_BOOK","gql","_templateObject","Create","isbn","react_apollo_esm","mutation","addBook","_ref","loading","error","onSubmit","e","preventDefault","variables","value","parseInt","htmlFor","type","name","ref","node","placeholder","cols","rows","UPDATE_BOOK","Edit_templateObject","Edit","_this","key","updateBook","id","defaultValue","GET_BOOKS","App_templateObject","DELETE_BOOK","_templateObject2","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","status","components_Show","components_Edit","components_Create","Math","floor","random","_this2","pollInterval","query","data","concat","message","books","map","index","getRandomColor","removeBook","_ref2","react_router_dom","onClick","index_esm","setState","components_Header","getComponent","Boolean","window","location","hostname","match","client","ApolloClient","uri","apolloProviderAndRouter","react_router","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46abf222.chunk.js","sourcesContent":["/**\n * This header file is for operation heading title.\n */\nimport React, { Component } from 'react';\n\n// Header component.\nclass Header extends React.Component {\n\t/**\n\t * This function get operation name and set header title according. \n\t * @param {*} operation \n\t */\n\tsetHeader ( operation ){\n\t\tif ( 'show' === operation) {\n\t\t\treturn \"DISPLAY BOOK DETAILS\";\n\t\t} else if( 'edit' === operation ) {\n\t\t\treturn 'EDIT BOOK INFORMATION';\n\t\t} else {\n\t\t\treturn \"ADD NEW BOOK\";\n\t\t}\n\t}\n\n\t//Render the actual header with given title.\n\trender() {\n\t\treturn (\n\t\t<nav className=\"navbar navbar-expand-sm bg-light\">\n\t\t\t{ this.setHeader( this.props.headerTitle ) }\n\t\t</nav>\n\t  );\n\t}\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nclass Show extends Component {  \n\trender () {\n\t  return (\n\t\t<table className=\"table table-hover table-bordered table-striped mt-3 text-white\">\n\t\t\t<thead>\n\t\t\t\t<th>Key</th>\n\t\t\t\t<th>Value</th>\n\t\t\t</thead>\n\t\t\t<tr>\n\t\t\t\t<td>Book ID</td>\n\t\t\t\t<td>{this.props.book._id}</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>Book Title</td>\n\t\t\t\t<td>{this.props.book.title}</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>Book Author</td>\n\t\t\t\t<td>{this.props.book.author}</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>Book Description</td>\n\t\t\t\t<td>{this.props.book.description}</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>Book Publish Year</td>\n\t\t\t\t<td>{this.props.book.published_year}</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>Book Publisher</td>\n\t\t\t\t<td>{this.props.book.publisher}</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>Book Update Time</td>\n\t\t\t\t<td>{this.props.book.updated_date}</td>\n\t\t\t</tr>\n\t\t</table>\n\t  );\n\t}\n  };\n  export default Show;","\nimport React, { Component } from 'react';\n// graphql-tag parse the graphQl query.\nimport gql from \"graphql-tag\";\nimport { Mutation } from \"react-apollo\";\n\n/**\n * This is graphQL query to add a book in the Node Express server.\n */\nconst ADD_BOOK = gql`\n    mutation AddBook(\n        $isbn: String!,\n        $title: String!,\n        $author: String!,\n        $description: String!,\n        $publisher: String!,\n        $published_year: Int!) {\n        addBook(\n            isbn: $isbn,\n            title: $title,\n            author: $author,\n            description: $description,\n            publisher: $publisher,\n            published_year: $published_year) {\n            _id\n        }\n    }\n`;\n\n/**\n * This component add new book using graphQL query ADD_BOOK.\n */\nclass Create extends Component {\n    render() {\n      let isbn, title, author, description, published_year, publisher;\n      return (\n        <Mutation mutation={ADD_BOOK} >\n            {(addBook, { loading, error }) => (\n                <div className=\"container mt-3\">\n                    <div className=\"panel panel-default\">\n                        <div className=\"panel-body\">\n                            <form onSubmit={e => {\n                                e.preventDefault();\n                                // Here call addBook query of graphQL. \n                                addBook({ variables: { isbn: isbn.value, title: title.value, author: author.value, description: description.value, publisher: publisher.value, published_year: parseInt(published_year.value) } });\n                                isbn.value = \"\";\n                                title.value = \"\";\n                                author.value = \"\";\n                                description.value = \"\";\n                                publisher.value = null;\n                                published_year.value = \"\";\n                            }}>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"isbn\">ISBN:</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"isbn\" ref={node => {\n                                        isbn = node;\n                                    }} placeholder=\"ISBN\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"title\">Title:</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"title\" ref={node => {\n                                        title = node;\n                                    }} placeholder=\"Title\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"author\">Author:</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"author\" ref={node => {\n                                        author = node;\n                                    }} placeholder=\"Author\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"description\">Description:</label>\n                                    <textarea className=\"form-control\" name=\"description\" ref={node => {\n                                        description = node;\n                                    }} placeholder=\"Description\" cols=\"80\" rows=\"3\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"author\">Publisher:</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"publisher\" ref={node => {\n                                        publisher = node;\n                                    }} placeholder=\"Publisher\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"author\">Published Year:</label>\n                                    <input type=\"number\" className=\"form-control\" name=\"published_year\" ref={node => {\n                                        published_year = node;\n                                    }} placeholder=\"Published Year\" />\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-dark\">Submit</button>\n                            </form>\n                            {loading && <p>Loading...</p>}\n                            {error && <p>Error :( Please try again</p>}\n                        </div>\n                    </div>\n                </div>\n            )}\n        </Mutation>\n      );\n    }\n}\n\nexport default Create;\n\n","import React, { Component } from 'react';\nimport gql from \"graphql-tag\";\nimport { Mutation } from \"react-apollo\";\n\nconst UPDATE_BOOK = gql`\n    mutation updateBook(\n        $id: String!,\n        $isbn: String!,\n        $title: String!,\n        $author: String!,\n        $description: String!,\n        $publisher: String!,\n        $published_year: Int!) {\n        updateBook(\n        id: $id,\n        isbn: $isbn,\n        title: $title,\n        author: $author,\n        description: $description,\n        publisher: $publisher,\n        published_year: $published_year) {\n            updated_date\n        }\n    }\n`;\n\nclass Edit extends Component {\n\n\trender() {\n\t  let isbn, title, author, description, published_year, publisher;\n\t  return (\n\t\t\t<Mutation mutation={UPDATE_BOOK} key={ this.props.book._id }>\n\t\t\t\t{(updateBook, { loading, error }) => (\n\t\t\t\t\t<div className=\"container mt-3\">\n\t\t\t\t\t\t<div className=\"panel panel-default\">\n\t\t\t\t\t\t\t<div className=\"panel-body\">\n\t\t\t\t\t\t\t\t<form onSubmit={e => {\n\t\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t\tupdateBook({ variables: { id: this.props.book._id, isbn: isbn.value, title: title.value, author: author.value, description: description.value, publisher: publisher.value, published_year: parseInt(published_year.value) } });\n\t\t\t\t\t\t\t\t\tisbn.value = \"\";\n\t\t\t\t\t\t\t\t\ttitle.value = \"\";\n\t\t\t\t\t\t\t\t\tauthor.value = \"\";\n\t\t\t\t\t\t\t\t\tdescription.value = \"\";\n\t\t\t\t\t\t\t\t\tpublisher.value = null;\n\t\t\t\t\t\t\t\t\tpublished_year.value = \"\";\n\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"isbn\">ISBN:</label>\n\t\t\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" name=\"isbn\" ref={node => {\n\t\t\t\t\t\t\t\t\t\t\tisbn = node;\n\t\t\t\t\t\t\t\t\t\t}} placeholder=\"ISBN\" defaultValue={this.props.book.isbn} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"title\">Title:</label>\n\t\t\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" name=\"title\" ref={node => {\n\t\t\t\t\t\t\t\t\t\t\ttitle = node;\n\t\t\t\t\t\t\t\t\t\t}} placeholder=\"Title\" defaultValue={this.props.book.title} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"author\">Author:</label>\n\t\t\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" name=\"author\" ref={node => {\n\t\t\t\t\t\t\t\t\t\t\tauthor = node;\n\t\t\t\t\t\t\t\t\t\t}} placeholder=\"Author\" defaultValue={this.props.book.author} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"description\">Description:</label>\n\t\t\t\t\t\t\t\t\t\t<textarea className=\"form-control\" name=\"description\" ref={node => {\n\t\t\t\t\t\t\t\t\t\t\tdescription = node;\n\t\t\t\t\t\t\t\t\t\t}} placeholder=\"Description\" cols=\"80\" rows=\"3\" defaultValue={this.props.book.description} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"author\">Publisher:</label>\n\t\t\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" name=\"publisher\" ref={node => {\n\t\t\t\t\t\t\t\t\t\t\tpublisher = node;\n\t\t\t\t\t\t\t\t\t\t}} placeholder=\"Publisher\" defaultValue={this.props.book.publisher} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"author\">Published Year:</label>\n\t\t\t\t\t\t\t\t\t\t<input type=\"number\" className=\"form-control\" name=\"published_year\" ref={node => {\n\t\t\t\t\t\t\t\t\t\t\tpublished_year = node;\n\t\t\t\t\t\t\t\t\t\t}} placeholder=\"Published Year\" defaultValue={this.props.book.published_year} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-dark\">Submit</button>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t{loading && <p>Loading...</p>}\n\t\t\t\t\t\t\t\t{error && <p>Error :( Please try again</p>}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</Mutation>\n\t  );\n\t}\n  }\n\nexport default Edit;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport gql from 'graphql-tag';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Query, Mutation } from 'react-apollo';\nimport * as FontAwesome from 'react-icons/fa'\nimport Header from './components/Header';\nimport Show from './components/Show';\nimport Create from './components/Create';\nimport Edit from './components/Edit';\n\nconst GET_BOOKS = gql`\n  {\n    books {\n      _id\n      isbn\n      title\n      author\n      description\n      published_year\n      publisher\n      updated_date\n    }\n  }\n`;\n\nconst DELETE_BOOK = gql`\n  mutation removeBook($id: String!) {\n    removeBook(id:$id) {\n      _id\n    }\n  }\n`;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        book: false,\n        status : false,\n      };\n  }\n\n  getComponent( ) {\n    if ( 'show' === this.state.status ) {\n      return <Show book={this.state.book}/>;\n    } else if ( 'edit' === this.state.status ) {\n      return <Edit book={this.state.book} />;\n    } else {\n      return <Create/>;\n    }\n  }\n\n  getRandomColor( ) {\n    const colorStack = [ 'primary', 'success', 'info', 'warning', 'danger', 'secondary', 'dark' ];\n    var random = Math.floor(Math.random() * 6 ); \n    return colorStack[random];\n  }\n\n  render() {\n    return (\n      <Query pollInterval={500} query={GET_BOOKS}>\n        {({ loading, error, data }) => {\n          if (loading) return 'Loading...';\n          if (error) return `Error! ${error.message}`;\n          return (\n              <div className=\"container-fluid h-100\">\n                <div className=\"row h-100\"> \n                  <div className=\"col-8 bg-dark\">\n                      {data.books.map((book, index) => (\n                        <div key={index} className={ 'm-2 btn btn-' + this.getRandomColor() } >\n                           <Mutation mutation={DELETE_BOOK} key={book._id}>\n                              {(removeBook, { loading, error }) => (\n                                <Link className=\"text-white p-2 \"  onClick={(e)=>{\n                                      e.preventDefault();\n                                      removeBook({ variables: { id: book._id } });\n                                }}>\n                                <FontAwesome.FaTrash/>     \n                                  {loading && <p>Loading...</p>}\n                                  {error && <p>Error :( Please try again</p>}\n                                </Link>\n                              )}\n                            </Mutation>\n                          <Link className=\"text-white text-decoration-none p-2\" title=\"click to show\" onClick={ ()=>{\n                            this.setState({\n                              book: book,\n                              status: 'show'\n                            });\n                          }}>\n                            {book.title}\n                          </Link>\n                          <Link  className=\"text-white p-2\" onClick={ () => {\n                            this.setState({\n                              book: book,\n                              status: 'edit'\n                            });\n                          }}>\n                            <FontAwesome.FaEdit />  \n                          </Link>\n                        </div>\n                      ))}\n                       <Link className=\"ml-5 mb-5\" id=\"addNew\" onClick={ () => {\n                           this.setState( { \n                             book:false,\n                             status : false,\n                           })\n                         }\n                       }>\n                        <FontAwesome.FaPlus />   \n                       </Link>\n\n                      </div>\n                      <div className=\"col-4 bg-info\">\n                      <Header headerTitle={ this.state.status}/>\n                        { this.getComponent() } \n                      </div>          \n                </div>\n              </div>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n/**\n * Apollo client which request to the graphQL server for the data according our query.\n */\nconst client = new ApolloClient( {\n\turi: \"/graphql\"\t\n} );\n\n\nconst apolloProviderAndRouter = (\n<ApolloProvider client={client}>\n\t<Router>\n\t\t<Route exact path='/' component={App} />\n\t</Router>\n</ApolloProvider>\n);\n\n// Render react componet App with defined apolloClient and routers.\nReactDOM.render(\n    apolloProviderAndRouter,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}